%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\frede\OneDrive\Documents\MATLAB\Git2\iris.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/01/26 13:10:35

%% Initialize variables.
filename = 'C:\Users\frede\OneDrive\Documents\MATLAB\Git2\iris.csv';
delimiter = ',';

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
SepalLength = dataArray{:, 1};
SepalWidth = dataArray{:, 2};
PetalLength = dataArray{:, 3};
PetalWidth = dataArray{:, 4};
Class = dataArray{:, 5};


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

%% Start analysis of data
figure
subplot(2,2,1)
gscatter(PetalLength, PetalWidth, Class);
subplot(2,2,2)
gscatter(SepalLength, PetalWidth, Class,'','','','off');
subplot(2,2,3)
gscatter(PetalLength, SepalWidth, Class,'','','','off');
subplot(2,2,4)
gscatter(SepalLength, SepalWidth, Class,'','','','off');

% PetalLength vs. PetalWidth and PetalLength vs. SepalWidth appear to be
% clear classification spaces.

%% Application of ML technique

trainbundle1 = [PetalLength(1:105,1),PetalWidth(1:105,1)]
trainbundle2 = [PetalLength(1:105,1),SepalWidth(1:105,1)]

testbundle1 = [PetalLength(106:150,1),PetalWidth(106:150,1)]
testbundle2 = [PetalLength(106:150,1),SepalWidth(106:150,1)]

trainClass = Class(1:105,1)
testClass = Class(106:150,1)

lda1 = fitcdiscr(trainbundle1,trainClass);
predict1 = predict(lda1,testbundle1);
correct1 = strcmp(testClass,predict1)

lda2 = fitcdiscr(trainbundle2,trainClass);
predict2 = predict(lda2,testbundle2);
correct2 = strcmp(testClass,predict2)

goodness1 = mean(correct1)*100
goodness2 = mean(correct2)*100

disp(['The PetalLength vs. PetalWidth model classified ',num2str(goodness1,4),'% of the test data correctly, while the PetalLength vs. SepalWidth model classified ',num2str(goodness2,4),'% of the test data correctly.'])
