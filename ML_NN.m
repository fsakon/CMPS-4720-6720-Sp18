%%Input should be matrix of data with outcome as first column
%% Initialize variables.
filename = 'C:\Users\frede\OneDrive\Documents\MATLAB\Git2\specttrain.csv';
delimiter = ',';
fileID = fopen(filename,'r');
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);
fclose(fileID);
Train = [dataArray{:, 1:23}];

filename = 'C:\Users\frede\OneDrive\Documents\MATLAB\Git2\specttest.csv';
fileID = fopen(filename,'r');
dataArray1 = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);
fclose(fileID);
Test = [dataArray1{:, 1:23}];

%% Set up matrix (Matlib Neural Net fitting tool separates Train/Test within the function
% This is why they are concatenated here.

X = [Train(:,2:23);Test(:,2:23)];
y = [Train(:,1);Test(:,1)];


%% Neural Network Fitting

% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 21-Feb-2018 14:19:17
%
% This script assumes these variables are defined:
%
%   X - input data.
%   y - target data.

x = X';
t = y';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Fitting Network
hiddenLayerSize = 3;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 35/100;
net.divideParam.valRatio = 35/100;
net.divideParam.testRatio = 30/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)